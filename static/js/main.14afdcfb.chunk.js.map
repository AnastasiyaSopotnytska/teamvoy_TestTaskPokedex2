{"version":3,"sources":["components/Pokemon_card/PokemonCard.tsx","components/Pokemons/Pokemons.tsx","api/api.tsx","App.tsx","index.tsx"],"names":["PokemonCard","pokemon","className","src","info","sprites","alt","name","charAt","toUpperCase","slice","id","types","map","item","type","stats","stat","base_stat","weight","moves","length","Pokemons","useState","count","setCount","pokemons","setPokemons","pokemonSelect","setPokemonSelect","allpokemons","useEffect","fetch","then","response","ok","json","Promise","reject","getPokemons","pokemonsFromServer","results","url","result","newPokemon","front_default","catch","error","console","log","classNames","fire","grass","poison","water","fairy","ground","electric","bug","flying","onClick","selectPokemon","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14afdcfb.chunk.js","sourcesContent":["import React from 'react';\nimport './PokemonCard.scss';\n\ntype Props = {\n  pokemon: newPokemon;\n};\n\nexport const PokemonCard: React.FC<Props> = ({ pokemon }) => {\n  return (\n    <div className=\"pokemon-card\">\n      <img src={pokemon.info.sprites} alt=\"pokemon\" className=\"pokemon-card_photo\" />\n      <div className=\"pokemon-card_name\">\n        {`${pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)} #${pokemon.info.id}`}\n      </div>\n\n      <table className=\"pokemon-card_details\">\n        <tbody>\n          <tr>\n            <th>\n              Type\n            </th>\n            <th>\n              {pokemon.info.types.map(item => (\n                <div key={item.type.name}>\n                  {item.type.name.charAt(0).toUpperCase() + item.type.name.slice(1)}\n                </div>\n              ))}\n            </th>\n          </tr>\n          {pokemon.info.stats.map(item => (\n            <tr\n              key={item.stat.name}\n              className=\"pockemon-info__stats\"\n            >\n              <th>\n                {item.stat.name.charAt(0).toUpperCase() + item.stat.name.slice(1)}\n              </th>\n              <th>\n                {item.base_stat}\n              </th>\n            </tr>\n          ))}\n          <tr>\n            <th>\n              Weight\n            </th>\n            <th>\n              {pokemon.info.weight}\n            </th>\n          </tr>\n          <tr>\n            <th>\n              Total moves\n            </th>\n            <th>\n              {pokemon.info.moves.length}\n            </th>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable array-callback-return */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getPokemonInfo, getPokemons } from '../../api/api';\nimport { PokemonCard } from '../Pokemon_card';\nimport './Pokemons.scss';\n\nexport const Pokemons: React.FC = () => {\n  const [count, setCount] = useState<number>(1);\n  const [pokemons, setPokemons] = useState<newPokemon[]>([]);\n  const [pokemonSelect, setPokemonSelect] = useState<newPokemon | null>();\n  let allpokemons: newPokemon[] = [];\n\n  useEffect(() => {\n    allpokemons = [];\n    getPokemons(count)\n      .then((pokemonsFromServer: Pokemons) => {\n        pokemonsFromServer.results.map(item => {\n          getPokemonInfo(item.url)\n            .then(result => {\n              const newPokemon: newPokemon = {\n                name: item.name,\n                url: item.url,\n                info: {\n                  sprites: result.sprites.front_default,\n                  moves: result.moves,\n                  stats: result.stats,\n                  types: result.types,\n                  weight: result.weight,\n                  id: result.id,\n                },\n              };\n\n              allpokemons = [...allpokemons, newPokemon];\n              setPokemons(allpokemons);\n            })\n            .catch((error) => {\n              // eslint-disable-next-line no-console\n              console.log(error);\n            });\n        });\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      });\n  }, [count]);\n\n  const selectPokemon = (pokemon: newPokemon) => {\n    if (pokemon.name === pokemonSelect?.name) {\n      setPokemonSelect(null);\n    } else {\n      setPokemonSelect(pokemon);\n    }\n  };\n\n  return (\n    <>\n      { pokemonSelect && (\n        <PokemonCard pokemon={pokemonSelect} />\n      )}\n\n      <div className=\"pokemons\">\n        {pokemons?.map(pokemon => (\n          <div key={pokemon.info.id} className=\"pokemons_cards\">\n            <img src={pokemon.info.sprites} alt=\"pokemon\" className=\"pokemons_photo\" />\n            <div className=\"pokemons_name\">\n              {pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}\n            </div>\n            <div>\n              {pokemon.info.types.map(item => (\n                <button\n                  type=\"button\"\n                  className={classNames('pokemons_types',\n                    { fire: item.type.name === 'fire' },\n                    { grass: item.type.name === 'grass' },\n                    { poison: item.type.name === 'poison' },\n                    { water: item.type.name === 'water' },\n                    { fairy: item.type.name === 'fairy' },\n                    { ground: item.type.name === 'ground' },\n                    { electric: item.type.name === 'electric' },\n                    { bug: item.type.name === 'bug' },\n                    { flying: item.type.name === 'flying' })}\n                  key={item.type.name}\n                  onClick={() => selectPokemon(pokemon)}\n                >\n                  {item.type.name.charAt(0).toUpperCase() + item.type.name.slice(1)}\n                </button>\n              ))}\n\n            </div>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            const i = count + 1;\n\n            setCount(i);\n          }}\n        >\n          Load More\n        </button>\n      </div>\n    </>\n  );\n};\n","const URL = 'https://pokeapi.co/api/v2/pokemon/?limit=';\n\nexport const getPokemons = (count: number) => {\n  return fetch(`${URL}${count * 12}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getPokemonInfo = (url: string) => {\n  return fetch(`${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport './App.scss';\nimport { Pokemons } from './components/Pokemons';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"main\">\n      <h1 className=\"main_title\">Pokedex</h1>\n      <Pokemons />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}